{
  "name": "node-linkedin",
  "version": "0.5.3",
  "description": "LinkedIn 2.0 compatible wrapper in node.js",
  "main": "lib/main",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:ArkeologeN/node-linkedin.git"
  },
  "keywords": [
    "linkedin",
    "wrapper",
    "api"
  ],
  "author": {
    "name": "Hamza Waqas",
    "email": "hamzawaqas.programmer@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/ArkeologeN/node-linkedin/issues"
  },
  "homepage": "https://github.com/ArkeologeN/node-linkedin",
  "dependencies": {
    "lodash": "~2.4.1",
    "request": "~2.31.0",
    "oauth": "~0.9.12"
  },
  "readme": "node-linkedin\n==============\n\nAnother Linkedin wrapper in Node.js\n\n[![NPM](https://nodei.co/npm/node-linkedin.png)](https://nodei.co/npm/node-linkedin/)\n\n### Why?\nGood question! Because when I started to use LinkedIn API, I found couple of wrappers but they were not compatible with OAuth2.0, there contributors didn't made any recent commit from several months and I had to utilize the whole wrapper with nice helper functions as well.\n\nSo, I decided to write another wrapper. We need it! So we can also maintain it! However, pull request are always major and we'd love to see that!\n\n### Getting Started\n\nJust like others, its simple and quick as per standard:\n\n[![NPM](https://nodei.co/npm/node-linkedin.png?mini=true)](https://nodei.co/npm/node-linkedin/)\n\nthis will install the module and add the entry in `package.json`. Lets start using it!\n\n```javascript\nvar Linkedin = require('node-linkedin')('app-id', 'secret', 'callback');\n```\nYou may omit the callback URL. However, you must set it later before requesting\nan authorization code.\n(This is useful if the callback URL depends on the request (e.g. from multiple domains.)\n\n```javascript\nvar Linkedin = require('node-linkedin')('app-id', 'secret');\n// ...\nLinkedin.auth.setCallback('callback-url');\n```\n\nBefore invoking any endpoint, please get the instance ready with your access token.\n\n```javascript\nvar linkedin = Linkedin.init('my_access_token');\n// Now, you're ready to use any endpoint\n```\n\nAdditionally, you can specify options. Currently, the only supported option is `timeout`, allowing you to specific a timeout (in ms) for the HTTP request. The default is 60 seconds (a value of 60000).\n\n```javascript\nvar linkedin = Linkedin.init('my_access_token', {\n    timeout: 10000 /* 10 seconds */\n});\n```\n\n## Requesting an Authorization Code\n\n#### OAuth 2.0\n\nSince LinkedIn supports OAuth 2.0 (and we regret to use 1.0 for authentication),\nlet's start using it.\n\nThe example below uses a routing library like `Express`. It is not required\nto use this module, but it's good enough to give a quick walkthrough.\n\n```javascript\n// Using a library like `expressjs` the module will\n// redirect for you simply by passing `res`.\napp.get('/oauth/linkedin', function(req, res) {\n    // This will ask for permisssions etc and redirect to callback url.\n    Linkedin.auth.authorize(res, scope);\n});\n```\n\nAlternatively, you can leave `res` out, and the module will respond with the redirect url\nwhich you can use to send the `HTTP redirect` on your own.\n```javascript\nvar auth_url = Linkedin.auth.authorize(scope);\n```\n\nYou may specify a custom state parameter:\n```javascript\nLinkedin.auth.authorize(res, scope, 'state');\n```\n\n#### Callback URL\n\nIf you have multiple domains pointing to the same application, you will need to\nset the callback URL based on the domain that is making the request.\n\n```javascript\napp.get('/oauth/linkedin', function(req, res) {\n    // set the callback url\n    Linkedin.setCallback(req.protocol + '://' + req.headers.host + '/oauth/linkedin/callback');\n    Linkedin.auth.authorize(res, scope);\n}\n```\n\n#### Scope\nThe `scope` previously mentioned refers to the data from LinkedIn to which your\napplication is requesting access.\nThis depends on your application's permissions registered with LinkedIn.\n\n```javascript\nvar scope = ['r_basicprofile', 'r_fullprofile', 'r_emailaddress', 'r_network', 'r_contactinfo', 'rw_nus', 'rw_groups', 'w_messages'];\n```\nNote: The scope need not be static.\n\n## Requesting an Access Token\n\nAfter the user is redirected to LinkedIn to authenticate, they are redirected to\nyour application's callback URL (whether they accept or decline authorization).\nSee the end of Step 2 on the\n[LinkedIn OAuth 2.0 Documentation](https://developer.linkedin.com/docs/oauth2).\n\nIf they accept, be sure to pass the `state` parameter to verify no CSRF\nintrusion. This is compared against the state parameter used in authentication.\n\n```javascript\n// Again, `res` is optional, you could pass `code` as the first parameter\napp.get('/oauth/linkedin/callback', function(req, res) {\n    Linkedin.auth.getAccessToken(res, req.query.code, req.query.state, function(err, results) {\n        if ( err )\n            return console.error(err);\n\n        /**\n         * Results have something like:\n         * {\"expires_in\":5184000,\"access_token\":\". . . .\"}\n         */\n\n        console.log(results);\n        return res.redirect('/');\n    });\n});\n```\n\n## Companies Search\n\nSupports all the calls as per the documentation available at LinkedIn Companies Search API\n\n```javascript\n\nlinkedin.companies_search.name('facebook', 1, function(err, company) {\n    name = company.companies.values[0].name;\n    desc = company.companies.values[0].description;\n    industry = company.companies.values[0].industries.values[0].name;\n    city = company.companies.values[0].locations.values[0].address.city;\n    websiteUrl = company.companies.values[0].websiteUrl;\n});\n```\n\n## Companies\n\nSupports all the calls as per the documentation available at: [LinkedIn Companies API](http://developer.linkedin.com/documents/company-lookup-api-and-fields).\n\n```javascript\n\nlinkedin.companies.company('162479', function(err, company) {\n    // Here you go\n});\n\nlinkedin.companies.name('logica', function(err, company) {\n    // Here you go\n});\n\nlinkedin.companies.email_domain('apple.com', function(err, company) {\n    // Here you go\n});\n\nlinkedin.companies.multiple('162479,universal-name=linkedin', function(err, companies) {\n    // Here you go\n});\n\nlinkedin.companies.asAdmin(function(err, companies) {\n    // Here you go\n});\n```\n\n## Profile\n\nSearches for the profiles as per the criteria.\n\n### Logged In User Profile.\n\n```javascript\nlinkedin.people.me(function(err, $in) {\n    // Loads the profile of access token owner.\n});\n\nOR\n\nlinkedin.people.me(['id', 'first-name', 'last-name'], function(err, $in) {\n    // Loads the profile of access token owner.\n});\n```\n\n### Profile by Public URL.\n\n```javascript\nlinkedin.people.url('long_public_url_here', function(err, $in) {\n    // Returns dob, education\n});\n\nOR\n\nlinkedin.people.url('long_public_url_here', ['id', 'first-name', 'last-name'], function(err, $in) {\n    // Returns dob, education\n});\n```\n\n### Profile by Id.\n\n```javascript\nlinkedin.people.id('linkedin_id', function(err, $in) {\n    // Loads the profile by id.\n});\n\nOR\n\nlinkedin.people.id('linkedin_id', ['id', 'first-name', 'last-name'], function(err, $in) {\n    // Loads the profile by id.\n});\n\n```\n\n## Connections\n\nInvokes LinkedIn's Connections API.\n\n```javascript\nlinkedin.connections.retrieve(function(err, connections) {\n    // Here you go! Got your connections!\n});\n\n```\n\n## Groups\n\nImplements wrapper for `LinkedIn Group API` and provides interface to invoke API endpoints.\n\nPS: For now, we just have feeds available.\n\n### Group discussions by Group ID\n```javascript\nlinkedin.group.feeds(3769732, function(err, data) {\n    // data: variable is ready to use.\n});\n```\n\nOR If you want to have custom field selector, take a look at this;\n\n```javascript\nlinkedin.group.feeds(3769732, ['field', 'field2', 'field3'] , function(err, data) {\n    // data: variable is ready to use.\n});\n```\n\nOR even if you want to have custom sorting parameters, you can just pass them as third argument:\n\n```javascript\nlinkedin.group.feeds(3769732, ['field', 'field2', 'field3'], {order: 'popularity'}, function(err, data) {\n    // data: variable is ready to use.\n});\n```\n\n## Author\n\nThis wrapper has been written & currently under maintenance by [Hamza Waqas](http://github.com/ArkeologeN). He's using twitter at: [@HamzaWaqas](http://twitter.com/HamzaWaqas)\n",
  "readmeFilename": "README.md",
  "_id": "node-linkedin@0.5.3",
  "dist": {
    "shasum": "bc7c2a3dc3d49f4ef3f0532efc8e1c2fc286d980"
  },
  "_from": "node-linkedin@",
  "_resolved": "https://registry.npmjs.org/node-linkedin/-/node-linkedin-0.5.3.tgz"
}
